---
title: "summaries"
author: "Brendan Karadenes"
format: html
---

# Dividing each pitch type into groups, 10/31

```{r}
unique(grouped_pitches$pitch_type)
```


```{r}
type_pitches <- filtered_pitchers %>%
  filter(!(pitch_type %in% c("CS", "PO"))) %>%
  mutate(pitch_group = case_when(
    pitch_type %in% c("FF", "SI", "FC") ~ "Fastball",
    pitch_type %in% c("CH", "FS", "KN") ~ "Offspeed",
    pitch_type %in% c("CU", "SL", "ST", "KC", "SV") ~ "Breaking_Ball" 
  ))
```

```{r}
divided_pitches <- type_pitches %>%
  group_by(player_name, pitch_group) %>%
  summarize(count = n(), .groups = "drop") %>%
  group_by(player_name) %>%
  mutate(proportion = count / sum(count)) %>%
  select(-count) %>%
  pivot_wider(names_from = pitch_group, values_from = proportion, values_fill = 0)
```

# Summary
In the chunks above I am categorizing each pitch type into 3 different groups: offspeed, fastballs, and breaking balls. This way we can standardize pitches across all different pitchers in the dataset.


# Clustering based on pitch groupings (Not accounting for any situation)

```{r}
cluster_pitches <- divided_pitches %>%
  select(Breaking_Ball, Fastball, Offspeed)
```

```{r}
dist_matrix <- dist(cluster_pitches, method = "euclidean")
```

```{r}
hc <- hclust(dist_matrix, method = "ward.D2")
```

```{r}
plot(hc, labels = cluster_pitches$player_name, main = "Heirarchal Clustering Based on Pitch Group")
```

```{r}
clusters <- cutree(hc, k = 5)
cluster_pitches.eight <- cluster_pitches %>%
  ungroup() %>%
  mutate(cluster = clusters)
```

# Summary
Here, I am clustering pitchers into 5 different groups based on their pitch arsenal and what proportion of the time they throw each different pitch (breaking balls, offspeed, and fastballs).

# Pitch Selection within each group

```{r}
pitch_selection <- cluster_pitches.eight %>%
  group_by(cluster) %>%
  summarize(
    avg_breaking_ball = mean(Breaking_Ball, na.rm = TRUE),
    avg_fastball = mean(Fastball, na.rm = TRUE),
    avg_offspeed = mean(Offspeed, na.rm = TRUE),
    count = n()
  )
```

```{r}
pitch_selection_plot <- pitch_selection %>%
  pivot_longer(cols = starts_with("avg"), names_to = "pitch_type", values_to = "proportion")
```

```{r}
ggplot(data = pitch_selection_plot, mapping = aes(x = factor(cluster), y = proportion, fill = pitch_type)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Cluster", y = "Average Proportion", fill = "Pitch Type", title = "Pitch Selection Between Clusters") +
  theme_minimal()
```

# Summary
Above I am tracking what proportion of the time each cluster of pitchers throws each pitch type.

# Heatmap with Ranks for Outs

```{r}
type_pitches_outs <- filtered_pitchers %>%
  filter(!(pitch_type %in% c("CS", "PO"))) %>%
  mutate(pitch_group = case_when(
    pitch_type %in% c("FF", "SI", "FC") ~ "Fastball",
    pitch_type %in% c("CH", "FS", "KN") ~ "Offspeed",
    pitch_type %in% c("CU", "SL", "ST", "KC", "SV") ~ "Breaking_Ball" 
  ))
```

```{r}
type_pitches_outs_sum <- type_pitches_outs %>%
  group_by(player_name, outs_when_up, pitch_group) %>%
  summarize(count = n(), .groups = "drop") %>%
  group_by(player_name, outs_when_up) %>%
  mutate(proportion = count/sum(count)) %>%
  select(-count) %>%
  pivot_wider(names_from = pitch_group, values_from = proportion, values_fill = 0)
```

```{r}
ranks_outs <- type_pitches_outs_sum %>%
  mutate(last_name = str_extract(player_name, "^[^,]+")) %>%
  group_by(outs_when_up) %>%
  mutate(
    rank_breaking_ball = rank(-Breaking_Ball),
    rank_fastball = rank(-Fastball),
    rank_offspeed = rank(-Offspeed)
  ) %>%
  ungroup() %>%
  select(player_name, outs_when_up, rank_breaking_ball, rank_fastball, rank_offspeed, last_name)
```

```{r}
ranks_outs_long <- ranks_outs %>%
  pivot_longer(cols = starts_with("rank"), names_to = "pitch_group", values_to = "rank") %>%
  mutate(pitch_group = gsub("rank_", "" ,pitch_group))
```

```{r}
ggplot(data = ranks_outs_long, mapping = aes(x = outs_when_up, y = last_name, fill = rank)) +
  geom_tile() +
  facet_wrap(~ pitch_group, ncol = 1) +
  scale_fill_gradient(low = "white", high = "red") +
  labs(
    x = "Outs",
    y = "Pitcher",
    fill = "Rank",
    title = "Heatmap of Pitch Group Ranks with Outs"
  ) +
  theme_minimal()
```

# Summary
Similar to above but with heatmaps and under different numbers of outs.

# 11/6 Finding how pitchers change in different situations

```{r}
specific_counts <- type_pitches %>%
  #filter(count %in% c("0-2", "1-2")) %>%
  group_by(player_name, pitch_group, count) %>%
  summarize(count_specific = n(), .groups = "drop") %>%
  group_by(player_name, count) %>%
  mutate(proportion_specific = count_specific - sum(count_specific)) %>%
  select(player_name, pitch_group, count, proportion_specific)
```

```{r}
general_selection <- divided_pitches %>%
  pivot_longer(cols = c(Fastball, Breaking_Ball, Offspeed),
               names_to = "pitch_group", values_to = "proportion_general") 
  
```

```{r}
comparison <- specific_counts %>%
  left_join(general_selection, by = c("player_name", "pitch_group")) %>%
  mutate(proportion_difference = proportion_specific - proportion_general)
```

```{r}
comparison_cluster <- comparison %>%
  left_join(cluster_pitches.eight %>% select(player_name, cluster), by = "player_name") %>%
  group_by(cluster, count, pitch_group) %>%
  summarize(avg_proportion_difference = mean(proportion_difference, na.rm = TRUE), .groups = "drop")
```

```{r}
library(ggplot2)
ggplot(data = comparison_cluster, aes(x = factor(cluster), y = avg_proportion_difference, fill = pitch_group)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ count, ncol = 1) +
  labs(x = "Cluster", y = "Average Change in Proportion", fill = "Pitch Type",
       title = "Change in Pitch Selection in 0-2 and 1-2 Counts by Cluster") + 
  theme_minimal()
```

# Summary
Above we are looking at how each cluster of pitchers may change their pitch selection in different situations from their usual strategy. Specifically we are looking at where they are 0-2 and 1-2 in the count.

# 11/7 Changes in Pitch Selection Using Z-Scores

```{r}
pitch_change_stats <- comparison %>%
  group_by(count, pitch_group) %>%
  summarize(
    mean_change = mean(proportion_difference, na.rm = TRUE),
    sd_change = sd(proportion_difference, na.rm= TRUE),
    .groups = "drop"
  )
```

```{r}
comparison_zscores <- comparison %>%
  left_join(pitch_change_stats, by = c("count", "pitch_group")) %>%
  mutate(z_score = (proportion_difference - mean_change) / sd_change)
```

```{r}
cluster_zscores <- comparison_zscores %>%
  left_join(cluster_pitches.eight %>% select(player_name, cluster), by = "player_name") %>%
  group_by(cluster, count, pitch_group) %>%
  summarize(avg_z_score = mean(z_score, na.rm = TRUE), .groups = "drop")
```

```{r}
ggplot(cluster_zscores, aes(x = factor(cluster), y = avg_z_score, fill = pitch_group)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ count, ncol = 1) +
  labs(x = "Cluster", y = "Average Z-Score", fill = "Pitch Type",
       title = "Standardized Changes in Pitch Selection by Cluster") +
  theme_minimal()
```

# 11/7 Comparing Within Each Cluster

```{r}
comparison_zscores_clusters <- comparison_zscores %>%
  left_join(cluster_pitches.eight %>% select(player_name, cluster), by = "player_name")
```

```{r}
ggplot(comparison_zscores_clusters, aes(x = factor(cluster), y = z_score, fill = pitch_group)) +
  geom_boxplot(outlier.shape = NA, alpha = 0.6) +
  geom_jitter(width = 0.2, alpha = 0.5, color = "black", size = 1.2) +
  facet_wrap(~ count + pitch_group, ncol = 3) +
  labs(
    x = "Cluster",
    y = "Z-Score",
    fill = "Pitch Type",
    title = "Variability in Pitch Selection within Clusters"
  ) +
  theme_minimal()
```

# 11/14: Reformatting Data for Proportions

```{r}
count_prop <- type_pitches %>%
#  filter(count %in% c("0-2", "1-2")) %>%
  group_by(player_name, count) %>%
  mutate(total_pitches = n()) %>%
  group_by(player_name, pitch_group, count) %>%
  summarise(proportion = n() / unique(total_pitches), .groups = 'drop')
```

```{r}
# adding cluster column
comparison <- comparison %>%
  left_join(cluster_pitches.eight %>% select(player_name, cluster), by = "player_name")
```

```{r}
count_diff <- count_prop %>%
  inner_join(comparison, by = c("player_name", "count", "pitch_group")) %>%
  mutate(difference = proportion_general - proportion)
```

```{r}
count_diff <- count_diff %>%
  select(-proportion_specific, -proportion_difference)
```

```{r}
avg_diff <- count_diff %>%
  group_by(player_name, count, cluster) %>%
  summarise(
    change_fastball = mean(difference[pitch_group == "Fastball"], na.rm = TRUE) %>% replace_na(0),
    change_breaking_ball = mean(difference[pitch_group == "Breaking_Ball"], na.rm = TRUE) %>% replace_na(0),
    change_offspeed = mean(difference[pitch_group == "Offspeed"], na.rm = TRUE) %>% replace_na(0)
  ) %>%
  ungroup()

```


# 11/14: Shiny App

```{r}
library(plotly)
library(shiny)
```

```{r}
cluster_1_data <- avg_diff %>%
  filter(cluster == 1)

plot <- plot_ly(
  data = cluster_1_data,
  x = ~change_fastball,
  y = ~change_breaking_ball,
  z = ~change_offspeed,
  type = "scatter3d",
  mode = "markers",
  text = ~player_name,  
  marker = list(size = 5)
) %>%
  layout(
    title = "Pitch Type Changes for Cluster 1",
    scene = list(
      xaxis = list(title = "Change in Fastball"),
      yaxis = list(title = "Change in Breaking Ball"),
      zaxis = list(title = "Change in Offspeed")
    )
  )

plot
```

```{r}
ui <- fluidPage(
  titlePanel("3D Pitch Type Change by Pitcher"),
  sidebarLayout(
    sidebarPanel(
      selectInput("count", "Select Count", choices = unique(avg_diff$count)),
      selectInput("cluster", "Select Cluster", choices = unique(avg_diff$cluster))
    ),
    mainPanel(
      plotlyOutput("pitch3DPlot")
    )
  )
)

# Define server logic
server <- function(input, output) {
  filtered_data <- reactive({
    avg_diff %>%
      filter(count == input$count, cluster == input$cluster)
  })
  
  output$pitch3DPlot <- renderPlotly({
    plot_ly(
      data = filtered_data(),
      x = ~change_fastball,
      y = ~change_breaking_ball,
      z = ~change_offspeed,
      type = "scatter3d",
      mode = "markers",
      text = ~player_name,
      marker = list(size = 5)
    ) %>%
      layout(
        scene = list(
          xaxis = list(title = "Change in Fastball"),
          yaxis = list(title = "Change in Breaking Ball"),
          zaxis = list(title = "Change in Offspeed")
        ),
        title = "3D Plot of Pitch Type Changes by Pitcher"
      )
  })
}

shinyApp(ui = ui, server = server)
```

Principle Component Analysis:

- Find new axes that explain the most variation in the data
- There will be 3 principle components from the 3D plane, we will keep the first
- two when transfering to the 2D axes
- Goal is to represent multivariate data table as a smaller set of variables.
- Takes the important variables and drops the less important ones
next week: modeling

# 11/21 Modeling Stats and Pitch Selection

```{r}
pitching23 <- read_csv("pitching23.csv")
```

```{r}
era_pitchers <- pitching23 %>%
  separate(Player, into = c("Firstname", "Lastname"), sep = " ", extra = "merge") %>%
  mutate(Player = paste(Lastname, Firstname, sep = ", "),
         ERA = ERA...3) %>%
  select(Player, ERA)
```

```{r}
# Perform the join
avg_diff <- avg_diff %>%
  left_join(era_pitchers, by = c("player_name" = "Player"))
```

```{r}
# Calculate SSE and absolute sum of changes for each pitcher
error_df <- avg_diff %>%
  group_by(player_name, count) %>%
  summarize(
    SSE = sum((change_fastball)^2 + (change_breaking_ball)^2 + (change_offspeed)^2),
    rSSE = sqrt(SSE),
    abs_sum = sum(abs(change_fastball) + abs(change_breaking_ball) + abs(change_offspeed)),
    ERA = first(ERA)  # Keep ERA the same for all counts of a player
  ) %>%
  ungroup()
```

```{r}
model <- lm(ERA ~ abs_sum * count + SSE, data = error_df)

summary(model)
```

No significant terms here. Not interested in using this model.

```{r}
ggplot(error_df, aes(x = ERA, y = SSE, color = as.factor(count))) +
  geom_point() +
  geom_smooth(method = "lm", aes(group = count), se = FALSE) +
  labs(
    title = "Effect of ERA and Count on SSE",
    x = "ERA",
    y = "SSE",
    color = "Count"
  ) +
  theme_minimal()

```

```{r}
ggplot(error_df, aes(x = ERA, y = abs_sum)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Relationship Between Absolute Sum of Changes and ERA",
    x = "ERA",
    y = "Absolute Sum of Changes"
  ) +
  theme_minimal()

```

# Strikeouts

```{r}
so_pitchers <- pitching23 %>%
  separate(Player, into = c("Firstname", "Lastname"), sep = " ", extra = "merge") %>%
  mutate(Player = paste(Lastname, Firstname, sep = ", "),
         ERA = ERA...3) %>%
  select(Player, SO)
```

```{r}
# Perform the join
avg_diff_so <- avg_diff %>%
  left_join(so_pitchers, by = c("player_name" = "Player"))
```

```{r}
library(tidyverse)
# Calculate SSE and absolute sum of changes for each pitcher
error_df_so <- avg_diff_so %>%
  group_by(player_name, count) %>%
  summarize(
    SSE = sqrt(sum((change_fastball)^2 + (change_breaking_ball)^2 + (change_offspeed)^2)),
    abs_sum = sum(abs(change_fastball) + abs(change_breaking_ball) + abs(change_offspeed)),
    SO = first(SO)  # Keep ERA the same for all counts of a player
  ) %>%
  ungroup()
```

```{r}
model_so <- lm(SO ~ abs_sum * count + SSE, data = error_df)

summary(model)
```

Again, no significant terms (except the intercept).

```{r}
ggplot(error_df, aes(x = SO, y = SSE, color = as.factor(count))) +
  geom_point() +
  geom_smooth(method = "lm", aes(group = count), se = FALSE) +
  labs(
    title = "Effect of SO and Count on SSE",
    x = "SO",
    y = "SSE",
    color = "Count"
  ) +
  theme_minimal()
# build model w indicators as clusters, count, pitcher dev as response, emmeans

```

```{r}
ggplot(error_df, aes(x = SO, y = abs_sum)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Relationship Between Absolute Sum of Changes and SO",
    x = "SO",
    y = "Absolute Sum of Changes"
  ) +
  theme_minimal()

```

Looking to find ways to see how pitch selection might effect performance. Tried ERA and strikeouts without finding any strong correlations. 

# 12/4: Models

```{r}
error_df_so_adj <- error_df_so %>%
  mutate(
    # Split 'count' into balls and strikes
    balls = as.numeric(sub("-.*", "", count)),
    strikes = as.numeric(sub(".*-", "", count)),
    # Calculate adjusted_count
    adjusted_count = strikes - balls
  )
```

```{r}
pitching23_cut <- pitching23 %>%
  mutate(Player = sub("^(\\S+)\\s+(.*)$", "\\2, \\1", Player)) %>%
  select(Player, FIP, WHIP, `SO/BB`, BF, IP) # Select only the desired columns
```

```{r}
stat_df <- error_df_so_adj %>%
  left_join(pitching23_cut, by = c("player_name" = "Player"))
```


```{r}
# Insignificant Variables, very low R^2
model_fip <- lm(FIP ~ SSE + abs_sum + adjusted_count, data = stat_df)
summary(model_fip)
```

```{r}
# Again, poor model
model_change <- lm(FIP ~ SSE + abs_sum, data = stat_df)
summary(model_change)
```

```{r}
# Poor model but better than previous 2
model_so <- lm(SO ~ SSE + abs_sum, data = stat_df)
summary(model_so)
```

```{r}
model_tot <- lm(SO ~ adjusted_count + SSE + abs_sum + WHIP + `SO/BB` + BF + IP, data = stat_df)
summary(model_tot)
AIC(model_tot)
BIC(model_tot)
```

A few signnificant terms: WHIP, SO/BB, batters faced, and innings pitched.

```{r}
mod_int <- lm(WHIP ~ adjusted_count*SSE + abs_sum + `SO/BB` + BF + IP, data = stat_df)
summary(mod_int)
AIC(mod_int)
BIC(mod_int)
```

Summary: Strikeout to walk ratio, batters faced and innings pitched are all significant terms. Much lower AIC and BIC than above.

```{r}
mod_int2 <- lm(SSE ~ adjusted_count*abs_sum + FIP + `SO/BB` + BF + IP, data = stat_df)
summary(mod_int2)
AIC(mod_int2)
BIC(mod_int2)
```

Summary: The only significant term seems to be the absolute value of the sum, nut lower AIC and BIC.

```{r}
# resid vs fitted
ggplot(data = data.frame(fitted = mod_int2$fitted.values, resid = residuals(mod_int2)),
       aes(x = fitted, y = resid)) +
  geom_point(color = "blue", alpha = 0.6) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(
    title = "Residuals vs Fitted",
    x = "Fitted Values",
    y = "Residuals"
  ) +
  theme_minimal()
```

```{r}
# normal q-q
ggplot(data = data.frame(resid = residuals(mod_int2)),
       aes(sample = resid)) +
  stat_qq(color = "blue", alpha = 0.6) +
  stat_qq_line(color = "red", linetype = "dashed") +
  labs(
    title = "Normal Q-Q Plot",
    x = "Theoretical Quantiles",
    y = "Sample Quantiles"
  ) +
  theme_minimal()

```

```{r}
# resid vs fitted
ggplot(data = data.frame(fitted = mod_int$fitted.values, resid = residuals(mod_int)),
       aes(x = fitted, y = resid)) +
  geom_point(color = "blue", alpha = 0.6) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(
    title = "Residuals vs Fitted",
    x = "Fitted Values",
    y = "Residuals"
  ) +
  theme_minimal()
```

```{r}
# normal q-q
ggplot(data = data.frame(resid = residuals(mod_int)),
       aes(sample = resid)) +
  stat_qq(color = "blue", alpha = 0.6) +
  stat_qq_line(color = "red", linetype = "dashed") +
  labs(
    title = "Normal Q-Q Plot",
    x = "Theoretical Quantiles",
    y = "Sample Quantiles"
  ) +
  theme_minimal()

```

```{r}
library(car)
vif(mod_int2)
```

```{r}
mod_int3 <- lm(log(SSE) ~ as.factor(adjusted_count) + FIP + `SO/BB` + IP, data = stat_df)
summary(mod_int3)
```

Summary: In this model when the pitcher is up in the count bye 1 or 2 strikes, down in the count by 1 ball, and even in the count those terms are significant.

```{r}
vif(mod_int3)
AIC(mod_int3)
BIC(mod_int3)
```

Lowest AIC and BIC so far.

```{r}
# resid vs fitted
ggplot(data = data.frame(fitted = mod_int3$fitted.values, resid = residuals(mod_int3)),
       aes(x = fitted, y = resid)) +
  geom_point(color = "blue", alpha = 0.6) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(
    title = "Residuals vs Fitted",
    x = "Fitted Values",
    y = "Residuals"
  ) +
  theme_minimal()
```

```{r}
# normal q-q
ggplot(data = data.frame(resid = residuals(mod_int3)),
       aes(sample = resid)) +
  stat_qq(color = "blue", alpha = 0.6) +
  stat_qq_line(color = "red", linetype = "dashed") +
  labs(
    title = "Normal Q-Q Plot",
    x = "Theoretical Quantiles",
    y = "Sample Quantiles"
  ) +
  theme_minimal()

```

# 12/12: Interaction Terms/Emmeans

```{r}
library(emmeans)
library(multcomp)
```

```{r}
mod_int4 <- lm(log(SSE) ~ as.factor(adjusted_count)*FIP + `SO/BB` + IP, data = stat_df)
anova(mod_int4)
AIC(mod_int4)
BIC(mod_int4)
```

Summary: In this model count and FIP are significant predictors. Slightly higher AIC and BIC.

```{r}
mod_int5 <- lm(log(SSE) ~ as.factor(adjusted_count)*`SO/BB` + FIP + IP, data = stat_df)
anova(mod_int5)
AIC(mod_int5)
BIC(mod_int5)
```

Summary: In this model count and strikeout to walk ratio are significant while the others do not appear to be so. Again, most of the variance is captured within the residuals. Similar AIC and BIC to above.

```{r}
mod_int6 <- lm(log(SSE) ~ as.factor(adjusted_count)*IP + FIP + `SO/BB`, data = stat_df)
anova(mod_int6)
AIC(mod_int6)
BIC(mod_int6)
```

Summary: In this model, the count and FIP are significant predictors for the log of SSE. The others do not seem to be significant and most of the variation is captured within the residuals. Similar AIC and BIC.

```{r}
obj <- emmeans(mod_int4,specs = as.factor("adjusted_count"))
```

```{r}
emmeans(mod_int4,specs = c("adjusted_count", "FIP"))
```

```{r}
emmeans_obj <- emmeans(mod_int4, specs = c("adjusted_count", "FIP"))
plot(pairs(obj)) + geom_vline(xintercept = 0)
cld(obj)
```

```{r}
joint_tests(mod_int4)
```

```{r}
pairs(emmeans_obj)
```

```{r}
# resid vs fitted
ggplot(data = data.frame(fitted = mod_int4$fitted.values, resid = residuals(mod_int4)),
       aes(x = fitted, y = resid)) +
  geom_point(color = "blue", alpha = 0.6) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(
    title = "Residuals vs Fitted",
    x = "Fitted Values",
    y = "Residuals"
  ) +
  theme_minimal()
```

```{r}
# normal q-q
ggplot(data = data.frame(resid = residuals(mod_int4)),
       aes(sample = resid)) +
  stat_qq(color = "blue", alpha = 0.6) +
  stat_qq_line(color = "red", linetype = "dashed") +
  labs(
    title = "Normal Q-Q Plot",
    x = "Theoretical Quantiles",
    y = "Sample Quantiles"
  ) +
  theme_minimal()

```

```{r}
# resid vs fitted
ggplot(data = data.frame(fitted = mod_int5$fitted.values, resid = residuals(mod_int5)),
       aes(x = fitted, y = resid)) +
  geom_point(color = "blue", alpha = 0.6) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(
    title = "Residuals vs Fitted",
    x = "Fitted Values",
    y = "Residuals"
  ) +
  theme_minimal()
```

```{r}
# normal q-q
ggplot(data = data.frame(resid = residuals(mod_int5)),
       aes(sample = resid)) +
  stat_qq(color = "blue", alpha = 0.6) +
  stat_qq_line(color = "red", linetype = "dashed") +
  labs(
    title = "Normal Q-Q Plot",
    x = "Theoretical Quantiles",
    y = "Sample Quantiles"
  ) +
  theme_minimal()

```

Semester Progress:

After working with clustering to get an idea of which pitchers fall into each different groups (i.e. fastball, breaking ball, and offspeed), we looked at how those pitchers fell into different groups in different situations (i.e. counts, outs, etc.). This helped us see how different pitchers would change their approach in within each cluster. After this we looked at various different models to see if different measures of success, like FIP and strikeouts, could predict how much a pitcher changes their approach.

# 2/4 Logistic Regression Models Based on Primary Pitch

```{r}
library(tidyverse)
pitching_model_data <- avg_diff %>%
  mutate(primary_pitch = case_when(
    change_fastball > change_breaking_ball & change_fastball > change_offspeed ~ "Fastball",
    change_breaking_ball > change_fastball & change_breaking_ball > change_offspeed ~ "Breaking_Ball",
    change_offspeed > change_fastball & change_offspeed > change_breaking_ball ~ "Offspeed",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(primary_pitch)) %>%
  mutate(primary_pitch = factor(primary_pitch, levels = c("Fastball", "Breaking_Ball", "Offspeed")))
```


```{r}
pitching_model_data <- pitching_model_data %>%
  left_join(stat_df, by = "player_name")
```

```{r}
logit_model <- glm(primary_pitch ~ as.factor(adjusted_count) + FIP + IP, data = pitching_model_data, family = "binomial")
summary(logit_model)
```

```{r}
logit_model_int <- glm(primary_pitch ~ as.factor(adjusted_count)*`SO/BB` + FIP + IP, data = pitching_model_data, family = "binomial")
summary(logit_model_int)
```

```{r}
anova(logit_model)
anova(logit_model_int)
```

```{r}
library(car)
vif(logit_model)
vif(logit_model_int)
```




